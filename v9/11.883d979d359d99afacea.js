(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"+wTf":function(s,n,a){"use strict";a.r(n),a.d(n,"DemoModule",(function(){return x}));var t=a("Valr"),l=a("DUip"),p=a("+a4R"),e=a("FID4"),c=a("TYT/");function o(s,n){1&s&&(c.Sb(0,"h3"),c.tc(1,"Most recent token"),c.Rb())}function r(s,n){if(1&s&&(c.Sb(0,"pre"),c.tc(1),c.Rb()),2&s){var a=c.cc();c.Bb(1),c.uc(a.formatToken(a.recentToken))}}function i(s,n){1&s&&(c.Sb(0,"h3",3),c.tc(1,"Most recent error"),c.Rb())}function h(s,n){if(1&s&&(c.Sb(0,"pre",3),c.tc(1),c.Rb()),2&s){var a=c.cc();c.Bb(1),c.uc(a.recentError.error||"Most recent execution resulted in error")}}function u(s,n){1&s&&(c.Sb(0,"pre"),c.tc(1,"(empty)"),c.Rb())}function j(s,n){if(1&s&&(c.tc(0," Token: "),c.Sb(1,"code"),c.tc(2),c.Rb()),2&s){var a=c.cc().$implicit,t=c.cc(2);c.Bb(2),c.uc(t.formatToken(a.token))}}function g(s,n){if(1&s&&(c.Sb(0,"span",3),c.tc(1,"Error"),c.Rb(),c.tc(2,": "),c.Sb(3,"code"),c.tc(4),c.Rb()),2&s){var a=c.cc().$implicit;c.Bb(4),c.uc(a.error||"This execution resulted in error")}}function m(s,n){if(1&s&&(c.Sb(0,"li"),c.tc(1," Action: "),c.Sb(2,"code"),c.tc(3),c.Rb(),c.tc(4,". "),c.sc(5,j,3,1,"ng-template",5),c.sc(6,g,5,1,"ng-template",5),c.Rb()),2&s){var a=n.$implicit;c.Bb(3),c.uc(a.action),c.Bb(2),c.fc("ngIf",a.token),c.Bb(1),c.fc("ngIf",!a.token)}}function d(s,n){if(1&s&&(c.Sb(0,"ol"),c.sc(1,m,7,3,"li",4),c.Rb()),2&s){var a=c.cc();c.Bb(1),c.fc("ngForOf",a.executionLog)}}var b=[{path:"",component:function(){function s(s){this.recaptchaV3Service=s,this.recentToken="",this.executionLog=[]}return s.prototype.executeAction=function(s){var n=this;this.singleExecutionSubscription&&this.singleExecutionSubscription.unsubscribe(),this.singleExecutionSubscription=this.recaptchaV3Service.execute(s).subscribe((function(s){n.recentToken=s,n.recentError=void 0}),(function(s){n.recentToken="",n.recentError={error:s}}))},s.prototype.ngOnInit=function(){var s=this;this.allExecutionsSubscription=this.recaptchaV3Service.onExecute.subscribe((function(n){return s.executionLog.push(n)})),this.allExecutionErrorsSubscription=this.recaptchaV3Service.onExecuteError.subscribe((function(n){return s.executionLog.push(n)}))},s.prototype.ngOnDestroy=function(){this.allExecutionsSubscription&&this.allExecutionsSubscription.unsubscribe(),this.allExecutionErrorsSubscription&&this.allExecutionErrorsSubscription.unsubscribe(),this.singleExecutionSubscription&&this.singleExecutionSubscription.unsubscribe()},s.prototype.formatToken=function(s){return s?s.substr(0,7)+"..."+s.substr(-7):"(empty)"},s.\u0275fac=function(n){return new(n||s)(c.Nb(p.d))},s.\u0275cmp=c.Hb({type:s,selectors:[["recaptcha-demo"]],decls:12,vars:6,consts:[[3,"click"],[4,"ngIf"],["class","error",4,"ngIf"],[1,"error"],[4,"ngFor","ngForOf"],[3,"ngIf"]],template:function(s,n){1&s&&(c.Sb(0,"button",0),c.ac("click",(function(){return n.executeAction("homepage")})),c.tc(1,'Execute "homepage" action'),c.Rb(),c.Sb(2,"button",0),c.ac("click",(function(){return n.executeAction("shoppingCart")})),c.tc(3,'Execute "shoppingCart" action'),c.Rb(),c.sc(4,o,2,0,"h3",1),c.sc(5,r,2,1,"pre",1),c.sc(6,i,2,0,"h3",2),c.sc(7,h,2,1,"pre",2),c.Sb(8,"h3"),c.tc(9,"reCAPTCHA execution log"),c.Rb(),c.sc(10,u,2,0,"pre",1),c.sc(11,d,2,1,"ol",1)),2&s&&(c.Bb(4),c.fc("ngIf",n.recentToken),c.Bb(1),c.fc("ngIf",n.recentToken),c.Bb(1),c.fc("ngIf",n.recentError),c.Bb(1),c.fc("ngIf",n.recentError),c.Bb(3),c.fc("ngIf",0===n.executionLog.length),c.Bb(1),c.fc("ngIf",n.executionLog.length>0))},directives:[t.j,t.i],styles:[".error[_ngcontent-%COMP%] { color: crimson; }"]}),s}(),data:{page:{feature:"v3",title:"reCAPTCHA v3 Example",content:{component:'<span class="hljs-keyword">import</span> { Component, OnDestroy, OnInit } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { OnExecuteData, OnExecuteErrorData, ReCaptchaV3Service } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n<span class="hljs-keyword">import</span> { Subscription } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">&#x27;recaptcha-demo&#x27;</span>,\n  styles: [<span class="hljs-string">`\n    .error { color: crimson; }\n`</span> ],\n  templateUrl: <span class="hljs-string">&#x27;./v3-demo.component.html&#x27;</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> RecaptchaV3DemoComponent <span class="hljs-keyword">implements</span> OnInit, OnDestroy {\n  <span class="hljs-keyword">public</span> recentToken: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span>;\n  <span class="hljs-keyword">public</span> recentError?: { error: <span class="hljs-built_in">any</span> };\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> executionLog: <span class="hljs-built_in">Array</span>&lt;OnExecuteData | OnExecuteErrorData&gt; = [];\n\n  <span class="hljs-keyword">private</span> allExecutionsSubscription: Subscription;\n  <span class="hljs-keyword">private</span> allExecutionErrorsSubscription: Subscription;\n  <span class="hljs-keyword">private</span> singleExecutionSubscription: Subscription;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params">\n    <span class="hljs-keyword">private</span> recaptchaV3Service: ReCaptchaV3Service,\n  </span>) {\n  }\n\n  <span class="hljs-keyword">public</span> executeAction(action: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.singleExecutionSubscription) {\n      <span class="hljs-built_in">this</span>.singleExecutionSubscription.unsubscribe();\n    }\n    <span class="hljs-built_in">this</span>.singleExecutionSubscription = <span class="hljs-built_in">this</span>.recaptchaV3Service.execute(action)\n      .subscribe(\n        <span class="hljs-function">(<span class="hljs-params">token</span>) =&gt;</span> {\n          <span class="hljs-built_in">this</span>.recentToken = token;\n          <span class="hljs-built_in">this</span>.recentError = <span class="hljs-literal">undefined</span>;\n        },\n        <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n          <span class="hljs-built_in">this</span>.recentToken = <span class="hljs-string">&#x27;&#x27;</span>;\n          <span class="hljs-built_in">this</span>.recentError = { error };\n        },\n      );\n  }\n\n  <span class="hljs-keyword">public</span> ngOnInit() {\n    <span class="hljs-built_in">this</span>.allExecutionsSubscription = <span class="hljs-built_in">this</span>.recaptchaV3Service.onExecute\n      .subscribe(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-built_in">this</span>.executionLog.push(data));\n    <span class="hljs-built_in">this</span>.allExecutionErrorsSubscription = <span class="hljs-built_in">this</span>.recaptchaV3Service.onExecuteError\n      .subscribe(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> <span class="hljs-built_in">this</span>.executionLog.push(data));\n  }\n\n  <span class="hljs-keyword">public</span> ngOnDestroy() {\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.allExecutionsSubscription) {\n      <span class="hljs-built_in">this</span>.allExecutionsSubscription.unsubscribe();\n    }\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.allExecutionErrorsSubscription) {\n      <span class="hljs-built_in">this</span>.allExecutionErrorsSubscription.unsubscribe();\n    }\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.singleExecutionSubscription) {\n      <span class="hljs-built_in">this</span>.singleExecutionSubscription.unsubscribe();\n    }\n  }\n\n  <span class="hljs-keyword">public</span> formatToken(token: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> {\n    <span class="hljs-keyword">if</span> (!token) {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(empty)&#x27;</span>;\n    }\n\n    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${token.substr(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)}</span>...<span class="hljs-subst">${token.substr(<span class="hljs-number">-7</span>)}</span>`</span>;\n  }\n}\n',html:'<span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;executeAction(&#x27;homepage&#x27;)&quot;</span>&gt;</span>Execute &quot;homepage&quot; action<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;executeAction(&#x27;shoppingCart&#x27;)&quot;</span>&gt;</span>Execute &quot;shoppingCart&quot; action<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h3</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;recentToken&quot;</span>&gt;</span>Most recent token<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">pre</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;recentToken&quot;</span>&gt;</span>{{ formatToken(recentToken) }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h3</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;recentError&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>Most recent error<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">pre</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;recentError&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>{{ recentError.error || &quot;Most recent execution resulted in error&quot; }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>reCAPTCHA execution log<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">pre</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;executionLog.length === 0&quot;</span>&gt;</span>(empty)<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ol</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;executionLog.length &gt; 0&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let entry of executionLog&quot;</span>&gt;</span>\n    Action: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>{{ entry.action }}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>.\n    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> [<span class="hljs-attr">ngIf</span>]=<span class="hljs-string">&quot;entry.token&quot;</span>&gt;</span>\n      Token: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>{{ formatToken(entry.token) }}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> [<span class="hljs-attr">ngIf</span>]=<span class="hljs-string">&quot;!entry.token&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>Error<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>{{ entry.error || &quot;This execution resulted in error&quot; }}<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>\n',module:{"":'<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaV3DemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.data&#x27;</span>;\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: RecaptchaV3DemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [RecaptchaV3DemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaV3Module,\n    CommonModule,\n  ],\n  providers: [\n    { provide: RECAPTCHA_V3_SITE_KEY, useValue: <span class="hljs-string">&#x27;6LeGCZAUAAAAADuhzcuvSB-lYDsxJBl9HUWtZkUM&#x27;</span> },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n',fr:'<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module, RECAPTCHA_LANGUAGE } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaV3DemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.data&#x27;</span>;\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: RecaptchaV3DemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [RecaptchaV3DemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaV3Module,\n    CommonModule,\n  ],\n  providers: [\n    { provide: RECAPTCHA_V3_SITE_KEY, useValue: <span class="hljs-string">&#x27;6LeGCZAUAAAAADuhzcuvSB-lYDsxJBl9HUWtZkUM&#x27;</span> },\n    { provide: RECAPTCHA_LANGUAGE, useValue: <span class="hljs-string">&#x27;fr&#x27;</span> },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n',de:'<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module, RECAPTCHA_LANGUAGE } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaV3DemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./v3-demo.data&#x27;</span>;\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: RecaptchaV3DemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [RecaptchaV3DemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaV3Module,\n    CommonModule,\n  ],\n  providers: [\n    { provide: RECAPTCHA_V3_SITE_KEY, useValue: <span class="hljs-string">&#x27;6LeGCZAUAAAAADuhzcuvSB-lYDsxJBl9HUWtZkUM&#x27;</span> },\n    { provide: RECAPTCHA_LANGUAGE, useValue: <span class="hljs-string">&#x27;de&#x27;</span> },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n'}}}}}],x=function(){function s(){}return s.\u0275mod=c.Lb({type:s}),s.\u0275inj=c.Kb({factory:function(n){return new(n||s)},providers:[{provide:p.c,useValue:"6LeGCZAUAAAAADuhzcuvSB-lYDsxJBl9HUWtZkUM"},{provide:p.a,useValue:Object(e.a)()}],imports:[[l.d.forChild(b),p.i,t.b]]}),s}()}}]);