(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"7SVS":function(s,a,n){"use strict";n.r(a);var e=n("CcnG"),l=n("26FU"),p=n("FID4"),c=function(){function s(){}return s.prototype.resolved=function(s){console.log("Resolved captcha with response: "+s)},s}(),r=new function(s){var a=new l.a(null);if(this.ready=a.asObservable(),"undefined"==typeof grecaptcha){var n=document.createElement("script");n.src="https://www.google.com/recaptcha/api.js?render="+s,document.head.appendChild(n)}var e=setInterval((function(){"undefined"!=typeof grecaptcha&&grecaptcha.render instanceof Function&&(clearInterval(e),a.next(grecaptcha))}),50)},t={page:{feature:"preload-api",title:"Preloaded reCAPTCHA API Example",content:{component:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">&#x27;recaptcha-demo&#x27;</span>,\n  templateUrl: <span class="hljs-string">&#x27;./preload-api-demo.component.html&#x27;</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PreloadApiDemoComponent {\n  <span class="hljs-keyword">public</span> resolved(captchaResponse: <span class="hljs-built_in">string</span>) {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Resolved captcha with response: <span class="hljs-subst">${captchaResponse}</span>`</span>);\n  }\n}\n',html:'<span class="hljs-tag">&lt;<span class="hljs-name">re-captcha</span>\n  (<span class="hljs-attr">resolved</span>)=<span class="hljs-string">&quot;resolved($event)&quot;</span>\n  <span class="hljs-attr">siteKey</span>=<span class="hljs-string">&quot;6LcOuyYTAAAAAHTjFuqhA52fmfJ_j5iFk5PsfXaU&quot;</span>\n&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">re-captcha</span>&gt;</span>\n',module:{"":'<span class="hljs-keyword">import</span> { Injectable, NgModule, Optional, Inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { BehaviorSubject, Observable } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaLoaderService, RecaptchaModule, RECAPTCHA_V3_SITE_KEY } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { PreloadApiDemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.data&#x27;</span>;\n\n<span class="hljs-meta">@Injectable</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PreloadedRecaptchaAPIService {\n  <span class="hljs-keyword">public</span> ready: Observable&lt;ReCaptchaV2.ReCaptcha&gt;;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params">\n    <span class="hljs-meta">@Optional</span>() <span class="hljs-meta">@Inject</span>(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: <span class="hljs-built_in">string</span>,\n  </span>) {\n    <span class="hljs-keyword">const</span> readySubject = <span class="hljs-keyword">new</span> BehaviorSubject&lt;ReCaptchaV2.ReCaptcha&gt;(<span class="hljs-literal">null</span>);\n    <span class="hljs-built_in">this</span>.ready = readySubject.asObservable();\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span>) {\n      <span class="hljs-keyword">const</span> recaptchaScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);\n      <span class="hljs-keyword">const</span> renderMode = v3SiteKey || <span class="hljs-string">&#x27;explicit&#x27;</span>;\n      recaptchaScript.src = <span class="hljs-string">`https://www.google.com/recaptcha/api.js?render=<span class="hljs-subst">${v3SiteKey}</span>`</span>;\n      <span class="hljs-built_in">document</span>.head.appendChild(recaptchaScript);\n    }\n\n    <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span> || !(grecaptcha.render <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>)) {\n        <span class="hljs-keyword">return</span>;\n      }\n\n      <span class="hljs-built_in">clearInterval</span>(interval);\n      readySubject.next(grecaptcha);\n    }, <span class="hljs-number">50</span>);\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> service = <span class="hljs-keyword">new</span> PreloadedRecaptchaAPIService();\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: PreloadApiDemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [PreloadApiDemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaModule,\n    CommonModule,\n  ],\n  providers: [\n    {\n      provide: RecaptchaLoaderService,\n      useValue: service,\n    },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n',fr:'<span class="hljs-keyword">import</span> { Injectable, NgModule, Optional, Inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { BehaviorSubject, Observable } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaLoaderService, RecaptchaModule, RECAPTCHA_LANGUAGE, RECAPTCHA_V3_SITE_KEY } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { PreloadApiDemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.data&#x27;</span>;\n\n<span class="hljs-meta">@Injectable</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PreloadedRecaptchaAPIService {\n  <span class="hljs-keyword">public</span> ready: Observable&lt;ReCaptchaV2.ReCaptcha&gt;;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params">\n    <span class="hljs-meta">@Optional</span>() <span class="hljs-meta">@Inject</span>(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: <span class="hljs-built_in">string</span>,\n  </span>) {\n    <span class="hljs-keyword">const</span> readySubject = <span class="hljs-keyword">new</span> BehaviorSubject&lt;ReCaptchaV2.ReCaptcha&gt;(<span class="hljs-literal">null</span>);\n    <span class="hljs-built_in">this</span>.ready = readySubject.asObservable();\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span>) {\n      <span class="hljs-keyword">const</span> recaptchaScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);\n      <span class="hljs-keyword">const</span> renderMode = v3SiteKey || <span class="hljs-string">&#x27;explicit&#x27;</span>;\n      recaptchaScript.src = <span class="hljs-string">`https://www.google.com/recaptcha/api.js?render=<span class="hljs-subst">${v3SiteKey}</span>`</span>;\n      <span class="hljs-built_in">document</span>.head.appendChild(recaptchaScript);\n    }\n\n    <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span> || !(grecaptcha.render <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>)) {\n        <span class="hljs-keyword">return</span>;\n      }\n\n      <span class="hljs-built_in">clearInterval</span>(interval);\n      readySubject.next(grecaptcha);\n    }, <span class="hljs-number">50</span>);\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> service = <span class="hljs-keyword">new</span> PreloadedRecaptchaAPIService();\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: PreloadApiDemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [PreloadApiDemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaModule,\n    CommonModule,\n  ],\n  providers: [\n    {\n      provide: RecaptchaLoaderService,\n      useValue: service,\n    },\n    { provide: RECAPTCHA_LANGUAGE, useValue: <span class="hljs-string">&#x27;fr&#x27;</span> },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n',de:'<span class="hljs-keyword">import</span> { Injectable, NgModule, Optional, Inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common&#x27;</span>;\n<span class="hljs-keyword">import</span> { Routes, RouterModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { BehaviorSubject, Observable } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { RecaptchaLoaderService, RecaptchaModule, RECAPTCHA_LANGUAGE, RECAPTCHA_V3_SITE_KEY } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ng-recaptcha&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { PreloadApiDemoComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.component&#x27;</span>;\n<span class="hljs-keyword">import</span> { settings } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./preload-api-demo.data&#x27;</span>;\n\n<span class="hljs-meta">@Injectable</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PreloadedRecaptchaAPIService {\n  <span class="hljs-keyword">public</span> ready: Observable&lt;ReCaptchaV2.ReCaptcha&gt;;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params">\n    <span class="hljs-meta">@Optional</span>() <span class="hljs-meta">@Inject</span>(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: <span class="hljs-built_in">string</span>,\n  </span>) {\n    <span class="hljs-keyword">const</span> readySubject = <span class="hljs-keyword">new</span> BehaviorSubject&lt;ReCaptchaV2.ReCaptcha&gt;(<span class="hljs-literal">null</span>);\n    <span class="hljs-built_in">this</span>.ready = readySubject.asObservable();\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span>) {\n      <span class="hljs-keyword">const</span> recaptchaScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);\n      <span class="hljs-keyword">const</span> renderMode = v3SiteKey || <span class="hljs-string">&#x27;explicit&#x27;</span>;\n      recaptchaScript.src = <span class="hljs-string">`https://www.google.com/recaptcha/api.js?render=<span class="hljs-subst">${v3SiteKey}</span>`</span>;\n      <span class="hljs-built_in">document</span>.head.appendChild(recaptchaScript);\n    }\n\n    <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> grecaptcha === <span class="hljs-string">&#x27;undefined&#x27;</span> || !(grecaptcha.render <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>)) {\n        <span class="hljs-keyword">return</span>;\n      }\n\n      <span class="hljs-built_in">clearInterval</span>(interval);\n      readySubject.next(grecaptcha);\n    }, <span class="hljs-number">50</span>);\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> service = <span class="hljs-keyword">new</span> PreloadedRecaptchaAPIService();\n\n<span class="hljs-keyword">const</span> routes: Routes = [\n  {\n    path: <span class="hljs-string">&#x27;&#x27;</span>,\n    component: PreloadApiDemoComponent,\n    data: { page: settings },\n  },\n];\n\n<span class="hljs-meta">@NgModule</span>({\n  declarations: [PreloadApiDemoComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    RecaptchaModule,\n    CommonModule,\n  ],\n  providers: [\n    {\n      provide: RecaptchaLoaderService,\n      useValue: service,\n    },\n    { provide: RECAPTCHA_LANGUAGE, useValue: <span class="hljs-string">&#x27;de&#x27;</span> },\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> DemoModule { }\n'}}}},o=Object(p.a)(),h=function(){},i=n("pMnS"),d=n("WZG6"),j=n("z0F3"),u=e.Db({encapsulation:2,styles:[],data:{}});function m(s){return e.Vb(0,[(s()(),e.Fb(0,0,null,null,1,"re-captcha",[["siteKey","6LcOuyYTAAAAAHTjFuqhA52fmfJ_j5iFk5PsfXaU"]],[[1,"id",0]],[[null,"resolved"]],(function(s,a,n){var e=!0,l=s.component;"resolved"===a&&(e=!1!==l.resolved(n)&&e);return e}),d.b,d.a)),e.Eb(1,4374528,null,0,j.g,[e.q,j.i,e.J,[2,j.d]],{siteKey:[0,"siteKey"]},{resolved:"resolved"})],(function(s,a){s(a,1,0,"6LcOuyYTAAAAAHTjFuqhA52fmfJ_j5iFk5PsfXaU")}),(function(s,a){s(a,0,0,e.Ob(a,1).id)}))}var y=e.Bb("recaptcha-demo",c,(function(s){return e.Vb(0,[(s()(),e.Fb(0,0,null,null,1,"recaptcha-demo",[],null,null,null,m,u)),e.Eb(1,49152,null,0,c,[],null,null)],null,null)}),{},{},[]),w=n("Ip0R"),g=n("ZYCi");n.d(a,"DemoModuleNgFactory",(function(){return k}));var k=e.Cb(h,[],(function(s){return e.Lb([e.Mb(512,e.m,e.rb,[[8,[i.a,y]],[3,e.m],e.H]),e.Mb(4352,j.i,r,[]),e.Mb(4608,w.l,w.k,[e.D,[2,w.s]]),e.Mb(1073742336,g.n,g.n,[[2,g.t],[2,g.l]]),e.Mb(1073742336,j.m,j.m,[]),e.Mb(1073742336,j.j,j.j,[]),e.Mb(1073742336,w.b,w.b,[]),e.Mb(1073742336,h,h,[]),e.Mb(1024,g.i,(function(){return[[{path:"",component:c,data:t}]]}),[]),e.Mb(256,j.b,o,[]),e.Mb(256,j.e,"6LeGCZAUAAAAADuhzcuvSB-lYDsxJBl9HUWtZkUM",[])])}))}}]);